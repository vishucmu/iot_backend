//
//  Vulnerability.hpp
//  IOTRiskAssessment
//
//  Created by Siddhant Jain on 3/11/18.
//  Updated by Paul Griffioen on 6/26/18.
//  Copyright Â© 2018 Siddhant Jain. All rights reserved.
//

#ifndef Vulnerability_hpp
#define Vulnerability_hpp

#include "../Common/CommonIncludes.h"

class Vulnerability
{
public:
    Vulnerability();
    Vulnerability(std::string inID,std::string inName,std::string inAttackLayer,std::string inVulnerabilityCategory,double inWeight,bool inUseDeviceWeights,double inWMin,double inWMax);
    string GetName();
    void SetLikelihood(double inLikelihood);
    void SetImpact(double inImpact);
    void SetMaxImpact(double inMaxImpact);
    double GetLikelihood();
    double GetImpact();
    double GetWeight();
    void SetDeviceWeight(double inDeviceWeight);
    void AddControlWeight(double inWeight);
    void ClearControlWeights();
    double GetControlWeight();
    double GetInherentRisk();
    double GetMaxInherentRisk();
    double GetResidualRisk();
private:
    std::string m_ID;
    std::string m_name;
    std::string m_attackLayer;
    std::string m_vulnerabilityCategory;
    double m_weight;
    vector<double> m_deviceWeights;
    double m_likelihood;
    double m_impact;
    double m_maxImpact;
    vector<double> m_controlWeights;
    uint m_numControls;
    uint m_numDevices;
    bool m_useDeviceWeights;
    double m_wMax, m_wMin;
    double UnionLikelihood(vector<double> weights);
};

#endif /* Vulnerability_hpp */
